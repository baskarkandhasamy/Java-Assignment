import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

class CustDetails {
	public String iCustName;
	public String iCustMob;
	public String iCustGovtId;
	public String iCustBalAmt;
	public String iCustSpntAmt;

	public String getiCustName() {
		return iCustName;
	}

	public void setiCustName(String iCustName) {
		this.iCustName = iCustName;
	}

	public String getiCustMob() {
		return iCustMob;
	}

	public void setiCustMob(String iCustMob) {
		this.iCustMob = iCustMob;
	}

	public String getiCustGovtId() {
		return iCustGovtId;
	}

	public void setiCustGovtId(String iCustGovtId) {
		this.iCustGovtId = iCustGovtId;
	}

	public String getiCustBalAmt() {
		return iCustBalAmt;
	}

	public void setiCustBalAmt(String iCustBalAmt) {
		this.iCustBalAmt = iCustBalAmt;
	}

	public String getiCustSpntAmt() {
		return iCustSpntAmt;
	}

	public void setiCustSpntAmt(String iCustSpntAmt) {
		this.iCustSpntAmt = iCustSpntAmt;
	}

	public CustDetails(String iCustName, String iCustMob, String iCustGovtId, String iCustBalAmt, String iCustSpntAmt) {
		this.iCustName = iCustName;
		this.iCustMob = iCustMob;
		this.iCustGovtId = iCustGovtId;
		this.iCustBalAmt = iCustBalAmt;
		this.iCustSpntAmt = iCustSpntAmt;
	}

	@Override
	public String toString() {
		return "CustDetails [iCustName=" + iCustName + ", iCustMob=" + iCustMob + ", iCustGovtId=" + iCustGovtId
				+ ", iCustBalAmt=" + iCustBalAmt + ", iCustSpntAmt=" + iCustSpntAmt + "]";
	}
}

public class Wallet {

	public String CustName;
	public String CustAcct;
	public String CustMob;
	public String CustGovtId;
	public String CustOtp;
	public String CustBalAmt;
	public String CustSpntAmt;
	public String ChkContinue;

	@Override
	public String toString() {
		return "Wallet [CustName=" + CustName + ", CustAcct=" + CustAcct + ", CustMob=" + CustMob + ", CustGovtId="
				+ CustGovtId + "]";
	}

	public Wallet(String custName, String custAcct, String custMob, String custGovtId) {
		CustName = custName;
		CustAcct = custAcct;
		CustMob = custMob;
		CustGovtId = custGovtId;

		System.out.println("*************************************");
		System.out.println("*** Welcome to the Digital Wallet ***");
		System.out.println("*************************************");
		System.out.println();

		signInDisp();
		Scanner scanner = new Scanner(System.in);

		String value;
		do {
			System.out.println("Press Y to continue, otherwise press any key to exit");
			value = scanner.nextLine();
			signInDisp();
		} while (value != "y");

	}

	public static boolean isStringOnlyAlphabet(String str) {
		return ((!str.equals("")) && (str != null) && (str.matches("^[a-zA-Z]*$")));
	}

	public static boolean isNumeric(String str) {
		if (str == null || str.length() == 0) {
			return false;
		}
		try {
			Double.parseDouble(str);
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
	}

	public static boolean isAlphaNumeric(String str) {
		return str != null && str.matches("^[a-zA-Z0-9]*$");
	}

	public String getCustName() {
		return CustName;
	}

	public void setCustName(String custName) {
		CustName = custName;
	}

	public String getCustAcct() {
		return CustAcct;
	}

	public void setCustAcct(String custAcct) {
		CustAcct = custAcct;
	}

	public String getCustMob() {
		return CustMob;
	}

	public void setCustMob(String custMob) {
		CustMob = custMob;
	}

	public String getCustGovtId() {
		return CustGovtId;
	}

	public void setCustGovtId(String custGovtId) {
		CustGovtId = custGovtId;
	}

	public void signInDisp() {

		System.out.println("Press Y for Sign in Or N for create Wallet");

		Scanner input = new Scanner(System.in);

		String text = input.nextLine();

		switch (text) {
		case "Y":
			System.out.println("You are signing into the Wallet!");
			break;
		case "y":
			System.out.println("You are signing into the Wallet!");
			break;

		case "N":
			System.out.println("You are heading to create a Wallet!");
			createWallet();
			// break;
		case "n":
			System.out.println("You are heading to create a Wallet!");
			createWallet();
			break;
		default:
			System.out.println("Invalid option, Enter Y or N!");
			System.out.println();
			signInDisp();
			break;
		}
	}

	public void createWallet() {

		CustNameEdit();

		CustAcctEdit();

		CustMobEdit();

		CustGovtIdEdit();

		CustOtpEdit();

		writeSet();

		writefile();
		readfile();
	}

	public void writeSet() {
		System.out.println("WriteSet");
		CustDetails custdetails = new CustDetails(CustName, CustMob, CustGovtId, CustBalAmt, CustSpntAmt);

		Map<String, Set<CustDetails>> custdetailList = new HashMap<String, Set<CustDetails>>();

		custdetails.setiCustName(CustName);
		custdetails.setiCustMob(CustMob);
		custdetails.setiCustGovtId(CustGovtId);
		custdetails.setiCustBalAmt(CustBalAmt);
		custdetails.setiCustSpntAmt(CustSpntAmt);

		Set<CustDetails> custlist = new LinkedHashSet<CustDetails>();
		
		for (CustDetails driver : custlist) {
            custlist.add(driver);
        }
		
		custdetailList.put(CustAcct, custlist);
		System.out.println("WriteSet1");
		System.out.println(custdetails);
		
		Set<CustDetails> custlist1 = custdetailList.get(CustAcct);
		custlist1.getClass();
	}

	public void CustNameEdit() {
		Scanner input1 = new Scanner(System.in);
		System.out.println("Enter Customer Name ");
		String text1 = input1.nextLine();
		CustName = text1;

		if (!isStringOnlyAlphabet(CustName)) {
			System.out.println("Customer Name contains incorrect character");
			CustNameEdit();
		}
		// else if (CustName.length() != 10) {
		// System.out.println("Customer Name should be 10 Characters");
		// CustNameEdit();
		// }
		setCustName(CustName);
	}

	public void CustAcctEdit() {
		Scanner input2 = new Scanner(System.in);
		System.out.println("Enter Customer Account ");
		String text2 = input2.nextLine();
		CustAcct = text2;

		if (!isNumeric(CustAcct)) {
			System.out.println("Customer Account should be numeric. Please Check!");
			CustAcctEdit();
		}
		// else if (CustAcct.length() != 10) {
		// System.out.println("Customer Account should be 10 digits. Please check!");
		// CustAcctEdit();
		// }
		setCustAcct(CustAcct);
	}

	public void CustMobEdit() {
		Scanner input3 = new Scanner(System.in);
		System.out.println("Enter Customer Mobile number ");
		String text3 = input3.nextLine();
		CustMob = text3;

		if (!isNumeric(CustMob)) {
			System.out.println("Customer Mobile number should be numeric. Please Check!");
			CustMobEdit();
		}
		// else if (CustMob.length() != 10) {
		// System.out.println("Customer Mobile number should be 10 digits. Please
		// check!");
		// CustMobEdit();
		// }
		setCustMob(CustMob);
	}

	public void CustGovtIdEdit() {
		Scanner input4 = new Scanner(System.in);
		System.out.println("Enter Customer Govt Id number ");
		String text4 = input4.nextLine();
		CustGovtId = text4;
		setCustGovtId(CustGovtId);

		if (!isAlphaNumeric(CustGovtId)) {
			System.out.println("Customer Govt Id should be alhpanumeric");
			CustGovtIdEdit();
		}
		// else if (CustGovtId.length() != 10) {
		// System.out.println("Customer Govt Id should be 10 digit alhpanumeric");
		// CustGovtIdEdit();
		// }
		setCustGovtId(CustGovtId);
	}

	public void CustOtpEdit() {
		Scanner input5 = new Scanner(System.in);
		System.out.println("Enter the OTP received to create the Wallet ");
		String text5 = input5.nextLine();
		CustOtp = text5;

		if (isNumeric(CustOtp)) {
			System.out.println(CustOtp);
		} else {
			System.out.println("OTP should be numeric");
			CustOtpEdit();
		}
		// if (CustOtp.length() != 6) {
		// System.out.println("OTP should be 6 digits");
		// CustOtpEdit();
		// }
	}

	public void writefile() {
		/*
		 * File file = new File("C:\\Users\\ACER\\Desktop\\test\\Example.txt");
		 * 
		 * appendUsingBufferedWriter(file,"Hello"); try(BufferedWriter br = new
		 * BufferedWriter(new FileWriter(file))) { br.write(CustName + " " + CustAcct +
		 * " " + CustMob + " " + CustGovtId); br.close(); } catch (IOException e) {
		 * System.out.println("Unable to Write File"); e.printStackTrace(); }
		 * System.out.println("Write Successful"); System.out.println();
		 */

		File file = new File("C:\\Users\\ACER\\Desktop\\test\\Example.txt");
		FileWriter fr = null;
		try {
			fr = new FileWriter(file, true);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		BufferedWriter br = new BufferedWriter(fr);
		try {
			br.write(CustName + " " + CustAcct + " " + CustMob + " " + CustGovtId);
			br.newLine();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			br.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			fr.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void readfile() {
		System.out.println("Reading the file : ");
		File file = new File("C:\\Users\\ACER\\Desktop\\test\\Example.txt");
		BufferedReader br = null;

		try {
			FileReader fr = new FileReader(file);
			br = new BufferedReader(fr);

			String line;

			while ((line = br.readLine()) != null) {
				System.out.println(line);
			}

		} catch (FileNotFoundException e) {
			System.out.println("File not found");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("Unable to read File");
			e.printStackTrace();
		} finally {
			try {
				br.close();
			} catch (IOException e) {
				System.out.println("Close error");
				e.printStackTrace();
			} catch (NullPointerException ex) {
			}
		}
	}
}
